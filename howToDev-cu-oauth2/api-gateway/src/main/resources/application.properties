server.port = 8003
spring.cloud.gateway.routes[0].id = route1
spring.cloud.gateway.routes[0].uri = lb://resource-server
spring.cloud.gateway.routes[0].predicates[0] = Path=/testController/token_getProfilePostAuthorize/{userId}
spring.cloud.gateway.routes[0].predicates[1] = Method=GET


spring.cloud.gateway.routes[1].id = orderGetAll
spring.cloud.gateway.routes[1].uri = lb://resource-server
spring.cloud.gateway.routes[1].predicates[0] = Path=/order/getAll
spring.cloud.gateway.routes[1].predicates[1] = Method=GET

spring.cloud.gateway.routes[2].id = orderGetAll_withWebClient
spring.cloud.gateway.routes[2].uri = lb://resource-server
spring.cloud.gateway.routes[2].predicates[0] = Path=/order/getAll_withWebClient
spring.cloud.gateway.routes[2].predicates[1] = Method=GET


##Eureca client setup
eureka.client.service-url.defaultZone=http://localhost:8004/eureka
#This is important for multi instance, otherwise eureka server will handle only one of the instance.
eureka.instance.instance-id==${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${random.value}}

#cu_CORS - Because our SPA app has different origin { http://localhost:8007(spa) <==> http://127.0.0.1:8002(api) }
#Cors must be configured either on API gateway or resource-server - not on both.

spring.cloud.gateway.globalcors.add-to-simple-url-handler-mapping=true
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedOrigins=http://localhost:8007
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedMethods=GET
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedHeaders=*

